server:
  port: 8764
  connection-timeout: 6000
  tomcat:
    max-threads: 200
  servlet:
    context-path: /customer

    ############################################################   mybatis  start ##########################################################################

mybatis:
  mapper-locations: classpath:mybatis/mappers/generator/mapper/*.xml
  configLocation: classpath:mybatis/mybatis-config.xml
  ############################################################   mybatis  end ##########################################################################

spring:
  application:
    name: customer-service

  ############################################################   mysql  start ##########################################################################
#使用了HikariCPConfig,无需再次配置
#  datasource:
#    type: com.zaxxer.hikari.HikariDataSource
#    driver-class-name: com.mysql.jdbc.Driver
#    username: xzh
#    password: xzh100366!
#    url: jdbc:mysql://xzhwxx.xyz:3306/ms_customer
#    name: ms_customer
  ############################################################   mysql  end ##########################################################################

############################################################   Redis  start ##########################################################################
  redis:
    port: 6379
#    host: aliCloud
    host: aliCloud
#    host: localhost
    database: 0   #选择redis的db0作为缓存存储位置
    jedis:
      pool:
        max-active: 50
        max-wait: 3000   #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 20     # 连接池中的最大空闲连接
        min-idle: 2
    timeout: 5000
  #    password: springboot  # Redis服务器连接密码（默认为空）
#  jackson:
#    property-naming-strategy: SNAKE_CASE //统一配置json序列化格式
############################################################   Redis  end ##########################################################################

############################################################   Kafka  start ##########################################################################
#acks=0: 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，
#并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
#acks=1: 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
#acks=all -1:这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
  kafka:
    producer:
      batch-size: 16384 #每当多个记录被发送到同一分区时，生产者将尝试将记录一起批量处理为更少的请求，这有助于提升客户端和服务器上的性能，此配置控制默认批量大小（以字节为单位），默认值为16384
      retries:  #如果该值大于零时，表示启用重试失败的发送次数
    listener:
      concurrency: 10 #在侦听器容器中运行的线程数

  consumer:
    bootstrap-servers: localhost:9092
    group-id: customer-comsumer-groupppp
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#    value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    enable-auto-commit: true
    auto-commit-interval: 1

############################################################   Kafka  end ##########################################################################

############################################################   Mongodb  start ##########################################################################
  data:
    mongodb:
      host: 101.132.135.14
      database: shiphub_stock
      username: shiphub_local
      password: decathlon
      port: 27017

############################################################   Mongodb  end ##########################################################################

############################################################   springCloud Eureka  start ##########################################################################

eureka:
  instance:
    appname: customer
    instance-id: ${spring.application.name}:${server.port}
    prefer-ip-address: false
    virtualHostName: ${spring.application.name}
    statusPageUrlPath: ${server.servlet.context-path}/actuator/info
    homePageUrlPath: ${server.servlet.context-path}/actuator/
    healthCheckUrlPath: ${server.servlet.context-path}/actuator/health
    hostname: localhost
    non-secure-port-enabled: true   #开启不安全通信的端口，就是使用http进行通信
    non-secure-port: 8764         #设置不安全端口号
    secure-port-enabled: true     #开启安全通信的端口，就是使用https进行通信
    secure-port: 443
    leaseRenewalIntervalInSeconds: 5
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://aliCloud:8761/eureka
############################################################   springCloud Eureka  end ##########################################################################



############################################################   springCloud Feign  start ##########################################################################

#在feign中使用hystrix断路器
feign:
  hystrix:
    enabled: true
  client:
    provide:
      name: provider-service
      path: /provider
    feign-hystrix:
      name: feign-hystrix
      path: /feign-hystrix
    config:
      provider-service:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: basic
  httpclient:
    connection-timeout: 5000
    enabled: true
    max-connections: 200
    follow-redirects: true
    connection-timer-repeat: 3000
############################################################   springCloud Feign  start ##########################################################################

############################################################   springCloud Ribbon  start ##########################################################################

ribbon:
  OkToRetryOnAllOperations: false #无论是请求超时或者socket read timeout都进行重试
  ReadTimeout: 5000 #请求处理的超时时间
  ConnectTimeout: 5000 #请求连接的超时时间
  MaxAutoRetries: 0 #对当前实例的重试次数（默认值为 0）
  MaxAutoRetriesNextServer: 1 #切换实例的重试次数（默认值为 1）
  eager-load:
    enabled: true
    clients: ${feign.client.provide.name}
############################################################   springCloud Ribbon  end ##########################################################################

############################################################   springCloud Hystrix  start ##########################################################################
hystrix:

# threadPool start
  threadpool:
    default:
      coreSize: 10 #并发执行的最大线程数，默认10
      allowMaximumSizeToDivergeFromCoreSize: true
      maximumSize: 20 #线程池允许最大线程数,如果allowMaximumSizeToDivergeFromCoreSize为false,则配置此无效
      maxQueueSize: 20 #BlockingQueue的最大队列长度,默认-1,使用SynchronousQueue。其他值则使用 LinkedBlockingQueue。
      queueSizeRejectionThreshold: 10 #排队线程数量阈值，默认为5，达到时拒绝，如果配置了该选项，队列的大小是该队列
      keepAliveTimeMinutes: 5 #非核心线程空闲等待时间,默认2minute
#自定义线程池
    provider-service:   #默认FeignClientName
      coreSize: 1 #并发执行的最大线程数，默认10
      allowMaximumSizeToDivergeFromCoreSize: true
      maximumSize: 2 #线程池允许最大线程数,如果allowMaximumSizeToDivergeFromCoreSize为false,则配置此无效
      maxQueueSize: 3 #BlockingQueue的最大队列长度,默认-1,使用SynchronousQueue。其他值则使用 LinkedBlockingQueue。
      queueSizeRejectionThreshold: 1 #排队线程数量阈值，默认为5，达到时拒绝，如果配置了该选项，队列的大小是该队列
      keepAliveTimeMinutes: 5 #非核心线程空闲等待时间,默认2minute
# threadPool end

#command start
  command:
    ##内置全局默认值
    default:
      fallback:
        enabled: true #确定在发生失败或拒绝时是否尝试调用HystrixCommand.getFallback（）。默认值为true
        isolation:
          semaphore:
            maxConcurrentRequests: 10 #设置从调用线程允许HystrixCommand.getFallback（）方法的最大请求数。 SEMAPHORE模式有效, 默认值：10

      circuitBreaker:
        enabled: true #确定断路器是否用于跟踪运行状况和短路请求（如果跳闸）。默认true
        requestVolumeThreshold: 10 #当在配置时间窗口内达到此数量的失败后，进行短路。默认20个
        sleepWindowInMilliseconds: 10000 #短路多久以后开始尝试是否恢复，默认5000
        errorThresholdPercentage: #出错百分比阈值，当达到此阈值后，开始短路。默认50%
        forceOpen: false #强制断路器进入打开（跳闸）状态，其中它将拒绝所有请求。默认false,此属性优先于circuitBreaker.forceClosed
        forceClosed: false #迫使断路器进入闭合状态，其中它将允许请求，而不考虑误差百分比。默认值为false.如果是强依赖，应该设置为true
                            #circuitBreaker.forceOpen属性优先，因此如果forceOpen设置为true，此属性不执行任何操作。
      execution:
        timeout:
          enabled: true #是否开启超时设置 默认true
        isolation:
          strategy: THREAD #隔离策略,1.THREAD - 它在单独的线程上执行，并发请求受线程池中的线程数量的限制;#2.SEMAPHORE - 它在调用线程上执行，并发请求受到信号量计数的限制
                                  #默认使用THREAD模式，以下几种场景可以使用SEMAPHORE模式：
                                  #只想控制并发度;外部的方法已经做了线程隔离;调用的是本地方法或者可靠度非常高、耗时特别小的方法（如redis）
          semaphore:
            maxConcurrentRequests: 1000 #设置在使用时允许到HystrixCommand.run（）方法的最大请求数。默认值：10,SEMAPHORE模式有效
          thread:
            interruptOnTimeout: true #在发生超时时，是否中断HystrixCommand.run() 的执行, 默认true,THREAD模式有效
            timeoutInMilliseconds: 5000 #在调用方配置，被调用的所有方法的超时时间都是该值，优先级低于指定配置(HystrixCommandKey) 默认1000
                                        #在THREAD模式下，达到超时时间，可以中断;在SEMAPHORE模式下，会等待执行完成后，再去判断是否超时
            interruptOnCancel: false #当发生取消任务时，是否中断HystrixCommand.run() 的执行, 默认false,THREAD模式有效

    ##内置实例默认值
    command_key_test: #实例属性配置（hystrixTimeoutTest为指定的commandKey),如果没有指定,默认为 类名+方法名,如:  HystrixServiceFeign#hystrixTimeOut(long)
      execution:
        timeout:
          enable: true
        isolation:
          thread:
            timeoutInMilliseconds: 700 #在调用方配置，被调用方的指定方法的超时时间 注意:如果maxQueueSize=-1的话，则该选项不起作用

#    HystrixServiceFeign#hystrixTimeOut(long): #实例属性配置,默认commandKey
#      execution:
#        timeout:
#          enable: true
#        isolation:
#          thread:
#            timeoutInMilliseconds: 700 #在调用方配置，被调用方的指定方法的超时时间 注意:如果maxQueueSize=-1的话，则该选项不起作用

#command end

  shareSecurityContext: true
############################################################   springCloud Hystrix  end ##########################################################################

#rocketMQ start
apache:
  rocketmq:
    namesrvAddr: 127.0.0.1:9876   # NameServer地址
    producer:
      producerGroup: Producer   # 生产者的组名
    consumer:
      pushConsumer: PushConsumer # 消费者的组名

#rocketMQ end

httpClient:
  pool:
    timeToLive: 6000
    maxTotal: 100
    maxPerRoute: 50
    socketTimeout: 15000
    connectTimeout: 15000
    connectionRequestTimeout: 5000
    keepAlive: 30000
#  proxy:
#    https:
#      hostname: proxy-internet-aws-china-production.subsidia.org
#      port: 3128
#      schema: https

############################################################   springboot actuator  start ##########################################################################

management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: '*'   #加载所有的端点/默认只加载了 info、health
      base-path: /actuator

# http://localhost:8764/customer/actuator/info 可以访问到
info:
  author: "xzh"
  version: "V1.0.1"
  blog-url: "https://blog.csdn.net/weixin_40910372"

############################################################   springboot actuator  end ##########################################################################

biz:
  data:
    hikari:
      datasource:
        url: jdbc:mysql://xzhwxx.xyz:3306/ms_customer
        userName: xzh
        password: xzh100366!
        driverClassName: com.mysql.jdbc.Driver
        poolName: CustomerHikariPool
        maxPoolSize: 50
        idleTimeout: 10000
        maxLifetime: 600000
        minIdle: 5

    kafka:
      stcom:
        partitions: 3
      producer:
        bootstrap-servers: localhost:9092
#        bootstrap-servers: aliCloud:9092
        acks: 1
        client-id: producer_customer
      #      retries: 3
      consumer:
        default:
          bootstrap-servers: aliCloud:9092
          group-id: default-customer-comsumer-group
          enable-auto-commit: true
          enable-auto-startup: true
          auto-commit-interval: 1
          concurrency: 1
          key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
          value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
          auto-offset-reset: earliest
#          auto-offset-reset: latest
        local:
          bootstrap-servers: localhost:9092
          group-id: local-customer-comsumer-group
          enable-auto-commit: true
          enable-auto-startup: true
          auto-commit-interval: 1
          concurrency: 1
          key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
          value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
          auto-offset-reset: earliest
          schema-registry-url: http://localhost:8081
    autoConfig:
      property:
        classF: hello
